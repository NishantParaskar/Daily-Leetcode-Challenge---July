#define M 1000000007
#define S 1024
typedef long long ll;
int primes[]={2,3,5,7,11,13,17,19,23,29};




class Solution {
public:
    int getMask(int nums){
        int Mask=0;
        for(int i=0;i<10;i++){
            int factor=0,p=primes[i];
            while(nums%p==0){
                nums/=p;
                factor++;
            }if(factor>1) return-1;
            Mask |=(factor<<i);
        }
        return Mask;
        
    }
    int numberOfGoodSubsets(vector<int>& nums) {
        int counts[31]={0},ans,Mask,dp[S]={1};
        for(auto n :nums) counts[n]++;
        for(int i=2;i<=30;i++){
            if(counts[i]==0 || (Mask=getMask(i))==-1)
                continue;
            for(int j=0;j<S;j++){
                if(Mask & j) continue;
                dp[Mask |j]=((ll)dp[j]*counts[i]+dp[Mask|j])%M;
            }
        }ans=accumulate(dp+1,dp+S,0ll)%M;
                   for(int r=2,p=counts[1];p; p>>=1,r=(ll)r*r%M)
                   if(p&1) ans=(ll)ans*r%M;
                   return ans;
        
    }
};